import asyncio
import os
from agents.base_agent import Agent
from tools.web_search import WebSearch
from tools.exploit_downloader import ExploitDownloader
from tools.bash_executor import BashExecutor
from core.memory import Memory

class ExploitAgent(Agent):
    """
    Specialized agent for exploit discovery, download, preparation, and execution.
    Integrates with scope system and follows existing agent patterns.
    Focuses on the full exploitation workflow: research → download → prepare → execute → shells
    """
    
    def __init__(self, name, prompt_path, provider, work_dir, verbose=False):
        super().__init__(name, prompt_path, provider, verbose)
        
        self.work_dir = work_dir
        self.role = "exploitation"
        self.type = "exploit_agent"
        
        self.exploits_dir = os.path.join(work_dir, "exploits")
        os.makedirs(self.exploits_dir, exist_ok=True)
        
        try:
            from core.ui import ui
            self.ui = ui
        except ImportError:
            self.ui = None
        
        try:
            self.add_tool("web_search", WebSearch())
            self.add_tool("exploit_downloader", ExploitDownloader())
            self.add_tool("bash", BashExecutor())
            if self.ui:
                self.ui.system_message(f"ExploitAgent tools initialized: web_search, exploit_downloader, bash")
        except Exception as e:
            if self.ui:
                self.ui.status(f"ExploitAgent: Failed to add tools: {e}", "error")
            else:
                print(f"ExploitAgent: Failed to add tools: {e}")
        
        self.memory = Memory(self.system_prompt)
    
    async def process(self, prompt):
        """
        Process exploitation requests with comprehensive workflow.
        Implements full cycle: CVE research → exploit acquisition → preparation → execution
        """
        exec_success = False
        
        enhanced_prompt = f"""{prompt}

You are operating as an Exploit Specialist. Your mission is to find, download, prepare, and execute exploits against targets within the authorized scope.

Working directory: {self.work_dir}
Exploits directory: {self.exploits_dir}

COMPLETE EXPLOITATION WORKFLOW EXAMPLE:

**Phase 1: Research & Discovery**
```web_search
CVE-2023-1234 Apache 2.4.49 exploit proof of concept
```
OR
```web_search
Apache HTTP Server directory traversal vulnerability exploit
```

**Phase 2: Exploit Acquisition**
```exploit_downloader
search_terms=CVE-2023-1234 Apache
source_preference=exploit-db
```

**Phase 3: Analysis & Preparation**
```bash
# Examine downloaded exploits
ls -la {self.exploits_dir}/
cat {self.exploits_dir}/exploit_*.txt | head -20

# Check exploit requirements
grep -i "usage" {self.exploits_dir}/exploit_*.txt
grep -i "python\|perl\|ruby\|bash" {self.exploits_dir}/exploit_*.txt

# Make executable if needed
chmod +x {self.exploits_dir}/*.sh
chmod +x {self.exploits_dir}/*.py
```

**Phase 4: Listener Setup (for reverse shells)**
```bash
# Set up netcat listener with logging
echo "Setting up listener on port 9001..."
nc -nlvp 9001 > {self.exploits_dir}/shell_session_$(date +%Y%m%d_%H%M%S).log &

# Check listener status
netstat -tlnp | grep :9001
```

**Phase 5: Exploit Execution**
Commands must be relative to exploit usage
```bash
# Execute against scoped targets
cd {self.exploits_dir}

# Python exploit example
python3 exploit_*.py --target 192.168.1.1 --port 80

# Shell script exploit example  
./exploit.sh 192.168.1.1

# Manual exploitation with curl/wget
curl -X POST "http://192.168.1.1/vulnerable_endpoint" -d "payload"
```

CRITICAL SAFETY REQUIREMENTS:

1. **SCOPE VALIDATION**: Only target IPs/domains in current penetration test scope
2. **LISTENER MANAGEMENT**: Always set up listeners before reverse shell attempts
3. **OUTPUT CAPTURE**: Save all command outputs and session logs
4. **NON-DESTRUCTIVE**: Use payloads that don't cause permanent damage
5. **DOCUMENTATION**: Record all exploitation attempts

TARGET SCOPE REFERENCE:
- Only execute exploits against targets in scope
- Verify target is in scope before ANY exploitation attempt
- If no targets in scope, inform user to add targets first

When executing exploits:
- Always check current scope before targeting
- Set up appropriate listeners for reverse shells
- Use non-destructive payloads when possible
- Capture all output in files for analysis
- Report success/failure with technical details

Example complete workflow:
1. Research specific CVE or service vulnerability
2. Download working exploit from exploit-db or GitHub
3. Analyze exploit requirements and customize for targets
4. Set up netcat listeners if needed to catch shell
5. Execute against scoped targets only
6. Establish and manage shell sessions
7. Document and report findings"""

        self.memory.push('user', enhanced_prompt)
        
        retry_count = 0
        max_retries = 3
        all_results = []
        
        while not exec_success and not self.stop and retry_count < max_retries:
            self.status_message = "Conducting exploitation workflow..."
            if self.ui and retry_count > 0:
                self.ui.thinking(f"Exploit workflow retry attempt {retry_count}")
            response = self.provider.respond(self.memory.get(), self.verbose)
            self.last_reasoning = self.extract_reasoning_text(response)
            clean_answer = self.remove_reasoning_text(response)
            self.memory.push('assistant', clean_answer)
            exec_success, feedback = self.execute_modules(response)
            if exec_success and feedback and "[success]" in feedback:
                tool_output = feedback.split(":\n", 1)[1] if ":\n" in feedback else feedback
                all_results.append(tool_output)
            
            if not exec_success and feedback:
                retry_feedback = f"The exploitation operation failed: {feedback}. Please try a different approach, different exploit source, or verify target scope."
                self.memory.push('user', retry_feedback)
                retry_count += 1
                if self.ui:
                    self.ui.status(f"Exploitation failed, retrying... ({retry_count}/{max_retries})", "warning")
            else:
                if all_results:
                    base_answer = self.remove_blocks(clean_answer)
                    self.last_answer = f"{base_answer}\n\nExploitation Results:\n" + "\n".join(all_results)
                else:
                    self.last_answer = self.remove_blocks(clean_answer)
        
        if retry_count >= max_retries:
            error_msg = "Exploitation workflow failed after multiple attempts. Please verify target scope, exploit availability, or try different CVE numbers."
            if self.ui:
                self.ui.status("Max exploitation retries reached", "error")
            self.last_answer = error_msg
        
        self.status_message = "Ready"
        return self.last_answer